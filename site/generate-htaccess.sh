#!/bin/bash

USAGE="Usage: $0 [<LTS baseline> ...]
"

[[ $# -gt 0 ]] || { echo "${USAGE}Expected at least one argument." >&2 ; exit 1 ; }

set -o pipefail
set -o errexit
set -o nounset

cat <<EOF
# THIS FILE IS GENERATED
#
# See: <https://github.com/jenkinsci/backend-update-center2/blob/master/site/generate-htaccess.sh>
RewriteEngine on

# If we have a match that looks like an LTS version, e.g. 1.554.1, redirect to stable-1.554
RewriteCond %{QUERY_STRING} ^.*version=([0-9]*\.[0-9]*)\..*$ [NC]
RewriteCond %{DOCUMENT_ROOT}/stable\-%1%{REQUEST_URI} -f
RewriteRule ^update\-center\.[json|html]+ /stable\-%1%{REQUEST_URI}? [NC,L,R=301]

EOF

echo "# Version-specific rulesets generated by generate.sh"

for ltsv in $@ ; do
    v=${ltsv%.1} # support args both as '1.234' and '1.234.1'.
    lastLTS=$v

    # Split our version up into an array for rewriting
    # 1.651 becomes (1 651)
    versionPieces=(${v//./ })
    major=${versionPieces[0]}
    minor=${versionPieces[1]}
    cat <<EOF
RewriteCond %{QUERY_STRING} ^.*version=${major}\.(\d+)$ [NC]
RewriteCond %1 <=${minor}
RewriteRule ^update\-center.*\.[json|html]+ /${major}\.${minor}%{REQUEST_URI}? [NC,L,R=301]

EOF

done


lts=$1
versionPieces=(${lts//./ })
major=${versionPieces[0]}
minor=${versionPieces[1]}
echo "# First LTS update site (stable-$major.$minor) gets all older releases"
cat <<EOF
RewriteCond %{QUERY_STRING} ^.*version=\d\.(\d+)\.\d+$ [NC]
RewriteRule ^update\-center.*\.[json|html]+ /stable-${major}\.${minor}%{REQUEST_URI}? [NC,L,R=301]

EOF


echo "# Add a RewriteRule for the last LTS we have, which should always rewrite to /stable"
cat <<EOF
RewriteRule ^stable/(.+) "/stable-${lastLTS}/\$1" [NC,L,R=301]

EOF



# Further static rules
cat <<EOF
# If that all failed, but we have an update center, let's go to current
RewriteRule ^update\-center.*\.[json|html]+ /current%{REQUEST_URI}? [NC,L,R=301]

# Ensure /release-history.json goes to the right place
RewriteRule ^release\-history\.json+ /current%{REQUEST_URI}? [NC,L,R=301]

# Ensure /plugin-versions.json goes to the right place
RewriteRule ^plugin\-versions\.json+ /current%{REQUEST_URI}? [NC,L,R=301]

# Ensure /plugin-documentation-urls.json goes to the right place
RewriteRule ^plugin\-documentation\-urls\.json+ /current%{REQUEST_URI}? [NC,L,R=301]

# Ensure /latestCore.txt goes to /current/latestCore.txt
RewriteRule ^latestCore\.txt+ /current%{REQUEST_URI}? [NC,L,R=301]



ReadmeName readme.html
IndexIgnore readme.html

# TODO: properly handle HTTPS in redirector

# For other tool installations under updates/
# HTTPS clients need to be served from HTTPS servers to avoid the error, so only send traffic to mirror for regular HTTP traffic
RewriteCond %{HTTPS} !=on
RewriteRule (.*\.json(\.html)?)$ http://mirrors.jenkins-ci.org/updates/\$1



# download/* directories contain virtual URL spaces for redirecting download traffic to mirrors.
RedirectMatch 302 /download/war/([0-9]*\.[0-9]*\.[0-9]*/jenkins)\.war$ http://mirrors.jenkins-ci.org/war-stable/\$1.war
RedirectMatch 302 /download/war/(.*)\.war$ http://mirrors.jenkins-ci.org/war/\$1.war
RedirectMatch 302 /download/plugins/(.*)\.hpi$ http://mirrors.jenkins-ci.org/plugins/\$1.hpi
EOF